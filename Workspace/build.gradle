buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

group = 'net.workspace'
version = '1.0-SNAPSHOT'
archivesBaseName = 'workspace'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2021.12.19-1.18.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--username', '<BadDev_#>'

            mods {
                workspace {
                    source sourceSets.main
                }

                clib {
                    source project(':CLib').sourceSets.main
                }

                cgalaxy {
                    source project(':CGalaxy').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                workspace {
                    source sourceSets.main
                }
                //MOD CLASSES:
                // "workspace%%$PROJECT_DIR$/../CMods 1.17.1\Workspace\build\resources\main;workspace%%$PROJECT_DIR$/../CMods 1.17.1\Workspace\build\classes\java\main;clib%%$PROJECT_DIR$/../CMods 1.17.1\CLib\build\resources\main;clib%%$PROJECT_DIR$/../CMods 1.17.1\CLib\build\classes\java\main;cgalaxy%%$PROJECT_DIR$/../CMods 1.17.1\CGalaxy\build\resources\main;cgalaxy%%$PROJECT_DIR$/../CMods 1.17.1\CGalaxy\build\classes\java\main"

                clib {
                    source project(':CLib').sourceSets.main
                }

                cgalaxy {
                    source project(':CGalaxy').sourceSets.main
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        // Patchouli
        url 'https://maven.blamejared.com'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }

    maven {
        //Curse maven
        url = "https://www.cursemaven.com"
    }

    maven {
        url 'https://modmaven.dev/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.18.1-39.0.63"

    //implementation fg.deobf("curse.maven:world-stripper-250603:3400494")
    //implementation fg.deobf("curse.maven:solargeneration-336538:3418138")

    //compile fg.deobf('slimeknights.tconstruct:TConstruct:1.16.5-3.1.0.231')
    //compile fg.deobf('slimeknights.mantle:Mantle:1.16.5-1.6.114')
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    runtimeOnly fg.deobf("mezz.jei:jei-1.18.1:9.1.0.47")


    implementation project(':CLib')
    implementation project(':CGalaxy')
}

sourceSets {
    main.resources.srcDirs += "$rootProject/CLib/src/main/resources"
}

mixin {
    add sourceSets.main, "clib.mixin-refmap.json"
    config 'clib.mixin.json'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "workspace",
                //"Specification-Vendor": "workspace authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "workspace authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                //"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                //"TweakOrder": 0,
                //"MixinConfigs" : "clib.mixin.json"
        ])
    }
}

publish.dependsOn('reobfJar')